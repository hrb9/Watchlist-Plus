File: plexauthgui/app.py
Function: init_db / check_token
Issue: Admin determination currently uses a 'first_user.flag' file and checks the count of users in the `auth_tokens` table. If no users exist, the next user to log in becomes admin. This mechanism is simple but has potential vulnerabilities:
    1.  If the `auth.db` is deleted or reset, the next user to log in will become admin, which might not be desired.
    2.  Manual deletion of the 'first_user.flag' (if it were to persist or be checked differently) or direct manipulation of the database could lead to unintended admin assignments.
    Suggestion: For a more robust system, consider an explicit admin user setup, perhaps via an initial environment variable that designates an admin username, or a CLI command to assign admin rights.

File: plexauthgui/app.py
Function: get_plex_auth_token
Issue: The `X-Plex-Product` and `X-Plex-Client-Identifier` values ("PlexWatchListPlusByBaramFlix0099999") are hardcoded.
    Suggestion: Move these to environment variables (e.g., `PLEX_PRODUCT_NAME`, `PLEX_CLIENT_ID`) to allow for easier configuration or branding changes without code modification.

File: plexauthgui/app.py
Function: connect (endpoint /connect)
Issue: This endpoint returns Plex tokens to other internal services based on a `user_id`. This implies a trust model where `plexauthgui` is the central authenticator and other services trust it to provide valid tokens for users.
    Comment: This is a common pattern in microservice architectures but relies on secure communication between services (e.g., private network, mTLS) and the assumption that services calling this endpoint are trusted. Ensure network policies prevent external access to this sensitive endpoint.

File: plexauthgui/app.py
Function: add_monthly_to_overseerr
Issue: The `add_discover_slider` function is called with `slider_type=1`. According to comments in `add_discover_slider` (and previous task context), `slider_type=1` is "Upcoming Movies" and type `4` is "TMDB Movie Recommendations". The `add_discover_slider` function now correctly sends TMDB IDs.
    Suggestion: While `add_discover_slider` uses the `slider_type` provided by the caller, it might be more appropriate for `add_monthly_to_overseerr` to pass `slider_type=4` ("TMDB Movie Recommendations") when it's creating a slider based on a list of TMDB IDs derived from monthly picks. This would make the slider type in Overseerr more semantically correct for the data it contains. Alternatively, Overseerr's slider types should be clearly documented and used consistently.

File: plexauthgui/templates/search_results.html
Issue: This file appears to be an older or alternative UI for search and recommendations. The primary UI seems to be `plexauthgui/templates/index.html`. The `search_results.html` file is not explicitly rendered by any route in `plexauthgui/app.py`.
    Suggestion: Verify if `search_results.html` is still in use or if it's an orphaned/obsolete file. If obsolete, it should be removed to avoid confusion and reduce codebase size.

File: watchlistrequests/app.py
Function: add_to_plex_watchlist
Issue: This function has a fallback mechanism: if adding to Plex watchlist via `MyPlexAccount(token=token).addToWatchlist()` fails, it attempts to call `recbyhistory` service's `/add_to_watchlist` endpoint.
    Comment: This fallback is good for resilience. However, it implies:
    1.  Potential for duplicated logic if `recbyhistory`'s `/add_to_watchlist` also tries to add to Plex directly.
    2.  If the direct Plex API interaction method is updated (e.g., to handle a new Plex API version or error type), the fallback method in `recbyhistory` might behave differently or become outdated if not updated in tandem.
    3.  It also means `watchlistrequests` has a dependency on `recbyhistory` for a core function, which might be unintentional if the goal was for `watchlistrequests` to handle all Plex interactions itself.
    Suggestion: Review if `recbyhistory`'s `/add_to_watchlist` is still necessary or if its logic should be consolidated within `watchlistrequests`. Ensure that both methods for adding to watchlist are kept consistent.

File: recbyhistory/app.py and recbyhistory/rec.py
Issue: API Key Usage in `recbyhistory`. The `plexauthgui` service was updated to prioritize its own environment API keys for Gemini/TMDB, falling back to client-provided keys. `recbyhistory` endpoints like `/discovery_recommendations` and `/ai_search` accept API keys in the request. The functions in `rec.py` (e.g., `generate_discovery_recommendations`, `get_ai_search_results`) then use these passed-in keys to initialize the Gemini client or for TMDB calls.
    For example, in `rec.py`, `generate_discovery_recommendations` explicitly sets `os.environ["GEMINI_API_KEY"] = gemini_api_key` and `os.environ["TMDB_API_KEY"] = tmdb_api_key` using the keys passed in the request.
    Comment: This is acceptable behavior. `recbyhistory` acts as a worker that uses the keys provided by the calling service (`plexauthgui`). `plexauthgui` is responsible for deciding which keys to use (its own environment or client-provided from its UI). This maintains a clear chain of key management. No change needed here, but it's good to confirm this behavior is intentional.

File: getimdbid/app.py
Function: get_imdb_id
Issue: The function `tmdb_get_imdb_id` is called but not defined within this file. It's likely imported from `tmdb_services.py` as `get_imdb_id`.
    Suggestion: For clarity, rename the import or the call to match. E.g., `from tmdb_services import get_imdb_id as tmdb_get_imdb_id` or call `get_imdb_id(...)` directly if that's the intended function. Currently, it seems `tmdb_get_imdb_id` is a typo and should be `get_imdb_id` (which is imported from `tmdb_services`).

File: recbyhistory/rec.py
Function: init_gemini_client
Issue: The function attempts to set an event loop using `nest_asyncio.apply()` and then `asyncio.get_event_loop()` or `asyncio.new_event_loop()`. However, `genai.Client()` is a synchronous client. While `nest_asyncio` might be harmless, the explicit asyncio loop management here seems unnecessary for the synchronous Gemini client.
    Suggestion: Simplify the `init_gemini_client` by removing the asyncio loop management unless there's a specific reason for it related to how `genai.Client` or its underlying transport works in a threaded environment (like APScheduler). If it's just for the client itself, it's not needed.

File: recbyhistory/rec.py
Function: print_history_groups (and functions it calls like `get_user_taste`, `get_ai_recommendations`)
Issue: This function orchestrates fetching history, generating taste, and getting recommendations. It re-initializes the Gemini client multiple times by calling `init_gemini_client()` inside `get_user_taste` and `get_ai_recommendations`.
    Suggestion: Initialize the Gemini client once, perhaps at the beginning of `print_history_groups` or even globally within the module if appropriate, and pass the client instance to functions that need it. This avoids repeated client instantiation.

File: recbyhistory/app.py
Function: init_data
Issue: The `init_data` endpoint sets API keys as environment variables: `os.environ["GEMINI_API_KEY"] = request.gemini_api_key`. This will affect the entire `recbyhistory` process.
    Comment: This is how `recbyhistory` gets its API keys if not already set in its environment. This is a valid way to configure it, especially if `plexauthgui` is the one calling this `init` endpoint and passing keys. It means `recbyhistory` relies on this initial call (or its own environment variables if `plexauthgui` doesn't pass them) to be configured.

File: General
Issue: Error Handling and Robustness
    Comment: Several places use `try...except Exception as e: print(...)` or `logging.error(...)` which is good for catching general errors. However, for network requests (using `requests` library), it's often better to catch more specific exceptions like `requests.exceptions.RequestException`, `requests.exceptions.Timeout`, `requests.exceptions.ConnectionError` to provide more granular error handling or logging. Some parts of the code already do this (e.g., `plexauthgui/app.py` in `search_ai` and `discovery`), this should be made consistent.
    Suggestion: Review `requests.post` and `requests.get` calls across all services and ensure specific network-related exceptions are handled where appropriate, in addition to general `Exception` catches.

File: General
Issue: Database Schema Consistency
    Comment: The primary concern about database schema consistency (services initializing each other's tables) was addressed by removing the redundant `watchlist_requests.db` initialization from `plexauthgui/app.py`. Each service now appears to manage its own database schema. This is good.

File: docker-compose.yml
Issue: API Keys in docker-compose.yml
    Comment: The `docker-compose.yml` file has placeholder values like `"your_gemini_key_here"` for API keys.
    Suggestion: This is standard practice for a template. Users deploying this will need to replace these with actual keys. Consider adding a `.env` file support or a note in `README.md` about managing these secrets (e.g., using Docker secrets, environment files). The current setup of reading from environment variables within the apps is good and flexible.

File: recbyhistory/app.py
Function: run_monthly_task
Issue: The global `RUNNING_TASKS` dictionary is used to prevent concurrent execution of `run_monthly_task` for the same user. However, the value set is `True` and then `pop` is used.
    Suggestion: While this works, using a more descriptive value or even just checking for key existence (`if user_id in RUNNING_TASKS:`) might be slightly clearer. The current logic is functional.

File: recbyhistory/rec.py
Function: update_recommendations_with_images
Issue: The logic for determining `likely_media_type` is basic (`if any(term in title.lower() for term in ["tv", "series", "show", "season"]):`). This might not always be accurate.
    Comment: This is a heuristic. The `getimdbid` service's `/convert_ids` endpoint is called, which itself has logic to try both movie and TV lookups if one fails. This fallback in `getimdbid` makes the initial guess here less critical, but it's worth noting that a more robust media type detection could be beneficial if this heuristic proves insufficient.

File: getimdbid/app.py
Function: get_imdb_from_title
Issue: Uses `imdbmovies.IMDB().get_by_name()`. The `imdbmovies` library might not be as up-to-date or comprehensive as TMDB for lookups.
    Comment: The service primarily relies on TMDB lookups via `tmdb_services.py`. This `get_imdb_from_title` is a fallback. Its effectiveness depends on the `imdbmovies` library. If issues arise with title-based IMDb ID lookups, this could be an area to investigate or replace with a TMDB-based title search if TMDB provides equivalent functionality.

File: recbyhistory/rec.py
Function: clean_json_output
Issue: This function has several strategies to clean potential malformed JSON from the AI.
    Comment: This is a good defensive measure. AI models can sometimes return non-JSON text or slightly malformed JSON. These cleaning steps increase the chances of successfully parsing the output.

File: recbyhistory/auth_client.py
Function: connect_to_plex
Issue: The timeout for `resource.connect(timeout=600)` is very long (10 minutes).
    Suggestion: Review if such a long timeout is necessary. Shorter timeouts with retries might be more appropriate for network operations to prevent threads from hanging for extended periods. Most Plex server connections should be much faster.

Overall:
The codebase shows significant improvements from the earlier stages. The separation of concerns is clearer, and recent changes have addressed several key issues. The review points above are mostly refinements or considerations for future robustness and maintenance.
The most impactful suggestions would be around the admin logic in `plexauthgui` for better security/robustness, standardizing Plex client identifiers, and ensuring the Overseerr slider type is semantically correct.
The `plexauthgui/templates/search_results.html` should be confirmed as obsolete or integrated.
The fallback logic in `watchlistrequests` is a point of attention for potential future inconsistencies.
```
